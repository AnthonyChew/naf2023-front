{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\antho\\\\OneDrive\\\\Desktop\\\\naf2022-front\\\\src\\\\MarketPlacePage\\\\ProductRow.js\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography'; // import { useSelector } from 'react-redux';\n\nimport React, { useState } from 'react'; // import clsx from 'clsx';\n\nimport { Table, TableBody, TableCell, TableHead, TableRow, Checkbox, IconButton, Collapse, Box } from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Button from '@material-ui/core/Button';\nimport AddProduct from './AddProduct';\nconst useRowStyles = makeStyles(theme => ({\n  root: {\n    // overflow: 'scroll',\n    '& > *': {\n      borderBottom: 'unset'\n    }\n  },\n  pdtAndImg: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  pdtImg: {\n    // marginTop: theme.spacing(1),\n    // marginBottom: theme.spacing(1),\n    maxHeight: 70\n  }\n}));\n\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n\nexport default function ProductRow(props) {\n  const {\n    row,\n    isItemSelected,\n    labelId,\n    selected,\n    setSelected,\n    isNested\n  } = props;\n  const [open, setOpen] = useState(false);\n  const classes = useRowStyles();\n  const {\n    _id,\n    colours,\n    sizes,\n    quantityBought,\n    //Orders of user\n    attribute1,\n    attribute2,\n    totalEarned,\n    quantitySold,\n    price,\n    total,\n    name,\n    productName,\n    imghref\n  } = row;\n  let {\n    quantity\n  } = row;\n  quantity = quantity ? quantity : quantityBought;\n  let totalQuantity = 0;\n\n  if (colours.length > 0) {\n    for (var i = 0; i < quantity.length; i++) {\n      var subarray = quantity[i];\n      var subarrayTotal = subarray.reduce(reducer);\n      totalQuantity += subarrayTotal;\n    }\n  } else {\n    totalQuantity = quantity[0].reduce(reducer);\n  }\n\n  if (totalQuantity >= Number.MAX_SAFE_INTEGER) {\n    totalQuantity = Number.MAX_SAFE_INTEGER;\n  }\n\n  let variants = []; //transform the data\n\n  if (colours.length > 0) {\n    for (let i = 0; i < colours.length; i++) {\n      if (row.sizes.length > 0) {\n        for (let j = 0; j < sizes.length; j++) {\n          variants.push({\n            colour: colours[i],\n            size: sizes[j],\n            quantity: quantity[i][j]\n          });\n        }\n      } else {\n        variants.push({\n          colour: colours[i],\n          quantity: quantity[i][0]\n        });\n      }\n    }\n  } else {\n    for (let j = 0; j < sizes.length; j++) {\n      variants.push({\n        size: sizes[j],\n        quantity: quantity[0][j]\n      });\n    }\n  }\n\n  const handleClick = (event, id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setSelected(newSelected);\n  }; //EDIT PRODUCT DIALOG\n\n\n  const [openEdit, setOpenEdit] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpenEdit(true);\n  };\n\n  const handleClose = () => {\n    setOpenEdit(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    hover: true,\n    role: \"checkbox\",\n    \"aria-checked\": isItemSelected,\n    tabIndex: -1,\n    key: row.name,\n    selected: isItemSelected,\n    className: variants.length > 0 && classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, !isNested && /*#__PURE__*/React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: isItemSelected,\n    inputProps: {\n      'aria-labelledby': labelId\n    },\n    onClick: event => handleClick(event, row._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, variants.length > 0 && /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"expand row\",\n    size: \"small\",\n    onClick: () => setOpen(!open),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, open ? /*#__PURE__*/React.createElement(KeyboardArrowUpIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(KeyboardArrowDownIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 49\n    }\n  }))), /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    id: labelId,\n    scope: \"row\" // padding=\"none\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.pdtAndImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, imghref && imghref !== '' ? /*#__PURE__*/React.createElement(\"img\", {\n    src: imghref,\n    alt: name,\n    style: {\n      width: '60px'\n    },\n    className: classes.pdtImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: '60px'\n    },\n    className: classes.pdtImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginLeft: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, productName || name))), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, totalQuantity > 10000000 ? 'Unlimited' : totalQuantity), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, total || totalEarned || quantitySold * price), !isNested && /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    size: \"small\",\n    onClick: handleClickOpen,\n    id: \"addProduct\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, \"Edit\"), openEdit && /*#__PURE__*/React.createElement(AddProduct //callback\n  , {\n    parentCallback: handleClose,\n    pdtName: name,\n    pdtDesc: row.description,\n    pdtCat: row.category,\n    pdtPrice: price,\n    pdtAtt1: attribute1,\n    pdtAtt1Options: colours,\n    pdtAtt2: attribute2,\n    pdtAtt2Options: sizes,\n    pdtCollect: row.canCollect,\n    pdtDeliver: row.canDeliver,\n    pdtQuantity: row.quantity,\n    pdtPreorder: row.isPreOrder,\n    pdtLeadtime: row.leadTime,\n    pdtImages: row.images,\n    _id: _id,\n    type: \"edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 15\n    }\n  }))), variants.length > 0 && /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    style: {\n      paddingBottom: 0,\n      paddingTop: 0\n    },\n    colSpan: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Collapse, {\n    in: open,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    margin: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    gutterBottom: true,\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, \"Variants for \", name || productName), /*#__PURE__*/React.createElement(Table, {\n    size: \"small\",\n    \"aria-label\": \"pdtVariants\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 21\n    }\n  }, colours.length > 1 && /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 25\n    }\n  }, attribute1), sizes.length > 1 && /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 25\n    }\n  }, attribute2), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 23\n    }\n  }, \"Quantity\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 19\n    }\n  }, variants.map(variant => /*#__PURE__*/React.createElement(TableRow, {\n    key: variant.pdtID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 23\n    }\n  }, variant.colour && /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 27\n    }\n  }, variant.colour), variant.size && /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 27\n    }\n  }, variant.size), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 25\n    }\n  }, variant.quantity > 100000 ? 'Unlimited' : variant.quantity))))))))));\n} // TableRowVendor.propTypes = {\n//   row: PropTypes.shape({\n//     calories: PropTypes.number.isRequired,\n//     carbs: PropTypes.number.isRequired,\n//     fat: PropTypes.number.isRequired,\n//     history: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         amount: PropTypes.number.isRequired,\n//         customerId: PropTypes.string.isRequired,\n//         date: PropTypes.string.isRequired,\n//       })\n//     ).isRequired,\n//     name: PropTypes.string.isRequired,\n//     price: PropTypes.number.isRequired,\n//     protein: PropTypes.number.isRequired,\n//   }).isRequired,\n// };\n//end","map":{"version":3,"sources":["C:/Users/antho/OneDrive/Desktop/naf2022-front/src/MarketPlacePage/ProductRow.js"],"names":["makeStyles","Typography","React","useState","Table","TableBody","TableCell","TableHead","TableRow","Checkbox","IconButton","Collapse","Box","KeyboardArrowDownIcon","KeyboardArrowUpIcon","Button","AddProduct","useRowStyles","theme","root","borderBottom","pdtAndImg","display","alignItems","pdtImg","maxHeight","reducer","accumulator","currentValue","ProductRow","props","row","isItemSelected","labelId","selected","setSelected","isNested","open","setOpen","classes","_id","colours","sizes","quantityBought","attribute1","attribute2","totalEarned","quantitySold","price","total","name","productName","imghref","quantity","totalQuantity","length","i","subarray","subarrayTotal","reduce","Number","MAX_SAFE_INTEGER","variants","j","push","colour","size","handleClick","event","id","selectedIndex","indexOf","newSelected","concat","slice","openEdit","setOpenEdit","handleClickOpen","handleClose","width","marginLeft","description","category","canCollect","canDeliver","isPreOrder","leadTime","images","paddingBottom","paddingTop","map","variant","pdtID"],"mappings":"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","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n// import { useSelector } from 'react-redux';\nimport React, { useState } from 'react';\n// import clsx from 'clsx';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Checkbox,\n  IconButton,\n  Collapse,\n  Box,\n} from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Button from '@material-ui/core/Button';\nimport AddProduct from './AddProduct';\n\nconst useRowStyles = makeStyles((theme) => ({\n  root: {\n    // overflow: 'scroll',\n    '& > *': {\n      borderBottom: 'unset',\n    },\n  },\n  pdtAndImg: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  pdtImg: {\n    \n    // marginTop: theme.spacing(1),\n    // marginBottom: theme.spacing(1),\n    maxHeight: 70,\n  },\n}));\n\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n\nexport default function ProductRow(props) {\n  const {\n    row,\n    isItemSelected,\n    labelId,\n    selected,\n    setSelected,\n    isNested,\n  } = props;\n\n  const [open, setOpen] = useState(false);\n  const classes = useRowStyles();\n\n  const {\n    _id,\n    colours,\n    sizes,\n    quantityBought, //Orders of user\n    attribute1,\n    attribute2,\n    totalEarned,\n    quantitySold,\n    price,\n    total,\n    name,\n    productName,\n    imghref,\n  } = row;\n  let { quantity } = row;\n  quantity = quantity ? quantity : quantityBought;\n  let totalQuantity = 0;\n  if (colours.length > 0) {\n    for (var i = 0; i < quantity.length; i++) {\n      var subarray = quantity[i];\n      var subarrayTotal = subarray.reduce(reducer);\n      totalQuantity += subarrayTotal;\n    }\n  } else {\n    totalQuantity = quantity[0].reduce(reducer);\n  }\n  if (totalQuantity >= Number.MAX_SAFE_INTEGER) {\n    totalQuantity = Number.MAX_SAFE_INTEGER;\n  }\n  let variants = [];\n  //transform the data\n  if (colours.length > 0) {\n    for (let i = 0; i < colours.length; i++) {\n      if (row.sizes.length > 0) {\n        for (let j = 0; j < sizes.length; j++) {\n          variants.push({\n            colour: colours[i],\n            size: sizes[j],\n            quantity: quantity[i][j],\n          });\n        }\n      } else {\n        variants.push({\n          colour: colours[i],\n          quantity: quantity[i][0],\n        });\n      }\n    }\n  } else {\n    for (let j = 0; j < sizes.length; j++) {\n      variants.push({\n        size: sizes[j],\n        quantity: quantity[0][j],\n      });\n    }\n  }\n\n  const handleClick = (event, id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  //EDIT PRODUCT DIALOG\n  const [openEdit, setOpenEdit] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpenEdit(true);\n  };\n  const handleClose = () => {\n    setOpenEdit(false);\n  };\n\n  return (\n    <React.Fragment>\n      <TableRow\n        hover\n        role=\"checkbox\"\n        aria-checked={isItemSelected}\n        tabIndex={-1}\n        key={row.name}\n        selected={isItemSelected}\n        className={variants.length > 0 && classes.root}\n      >\n        {!isNested && (\n          <TableCell padding=\"checkbox\">\n            <Checkbox\n              checked={isItemSelected}\n              inputProps={{ 'aria-labelledby': labelId }}\n              onClick={(event) => handleClick(event, row._id)}\n            />\n          </TableCell>\n        )}\n        <TableCell padding=\"checkbox\">\n          {variants.length > 0 && (\n            <IconButton\n              aria-label=\"expand row\"\n              size=\"small\"\n              onClick={() => setOpen(!open)}\n            >\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n            </IconButton>\n          )}\n        </TableCell>\n        <TableCell\n          component=\"th\"\n          id={labelId}\n          scope=\"row\"\n          // padding=\"none\"\n        >\n          <div className={classes.pdtAndImg}>\n            {imghref && imghref !== '' ? (\n              <img\n                src={imghref}\n                alt={name}\n                style={{ width: '60px' }}\n                className={classes.pdtImg}\n              />\n            ) : (\n              <img style={{ width: '60px' }} className={classes.pdtImg} />\n            )}\n\n            <span style={{marginLeft: \"20px\"}}>{productName || name}</span>\n          </div>\n        </TableCell>\n        <TableCell align=\"center\">\n          {totalQuantity > 10000000 ? 'Unlimited' : totalQuantity}\n        </TableCell>\n        <TableCell align=\"center\">\n          {total || totalEarned || quantitySold * price}\n        </TableCell>\n        {!isNested && (\n          <TableCell align=\"center\">\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={handleClickOpen}\n              id=\"addProduct\"\n            >\n              Edit\n            </Button>\n            {openEdit && (\n              <AddProduct\n                //callback\n                parentCallback={handleClose}\n                pdtName={name}\n                pdtDesc={row.description}\n                pdtCat={row.category}\n                pdtPrice={price}\n                pdtAtt1={attribute1}\n                pdtAtt1Options={colours}\n                pdtAtt2={attribute2}\n                pdtAtt2Options={sizes}\n                pdtCollect={row.canCollect}\n                pdtDeliver={row.canDeliver}\n                pdtQuantity={row.quantity}\n                pdtPreorder={row.isPreOrder}\n                pdtLeadtime={row.leadTime}\n                pdtImages={row.images}\n                _id={_id}\n                type=\"edit\"\n              />\n            )}\n            {/* {console.log(row)} */}\n          </TableCell>\n        )}\n      </TableRow>\n      {variants.length > 0 && (\n        <TableRow>\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\n              <Box margin={2}>\n                <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\n                  Variants for {name || productName}\n                </Typography>\n                <Table size=\"small\" aria-label=\"pdtVariants\">\n                  <TableHead>\n                    <TableRow>\n                      {/* <TableCell>Product ID</TableCell> */}\n                      {colours.length > 1 && (\n                        <TableCell align=\"center\">{attribute1}</TableCell>\n                      )}\n                      {sizes.length > 1 && (\n                        <TableCell align=\"center\">{attribute2}</TableCell>\n                      )}\n                      <TableCell align=\"center\">Quantity</TableCell>\n                      {/* <TableCell align=\"right\">Unit price ($)</TableCell> */}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {variants.map((variant) => (\n                      <TableRow key={variant.pdtID}>\n                        {variant.colour && (\n                          <TableCell align=\"center\">{variant.colour}</TableCell>\n                        )}\n                        {variant.size && (\n                          <TableCell align=\"center\">{variant.size}</TableCell>\n                        )}\n                        <TableCell align=\"center\">\n                          {variant.quantity > 100000\n                            ? 'Unlimited'\n                            : variant.quantity}\n                        </TableCell>\n                        {/* <TableCell align=\"right\">{variant.unitPrice}</TableCell> */}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </Box>\n            </Collapse>\n          </TableCell>\n        </TableRow>\n      )}\n    </React.Fragment>\n  );\n}\n\n// TableRowVendor.propTypes = {\n//   row: PropTypes.shape({\n//     calories: PropTypes.number.isRequired,\n//     carbs: PropTypes.number.isRequired,\n//     fat: PropTypes.number.isRequired,\n//     history: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         amount: PropTypes.number.isRequired,\n//         customerId: PropTypes.string.isRequired,\n//         date: PropTypes.string.isRequired,\n//       })\n//     ).isRequired,\n//     name: PropTypes.string.isRequired,\n//     price: PropTypes.number.isRequired,\n//     protein: PropTypes.number.isRequired,\n//   }).isRequired,\n// };\n\n//end\n"]},"metadata":{},"sourceType":"module"}