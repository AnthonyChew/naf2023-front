{"ast":null,"code":"import axios from 'axios';\nimport config from '../config/env';\nimport { useState, useCallback, useMemo, useEffect } from 'react'; // Next we make an 'instance' of it\n\nconst axiosConfig = axios.create({\n  // .. where we make our configurations\n  baseURL: `${config.backendUrl}/api`,\n  withCredentials: true\n});\n\nconst useAxiosLoader = () => {\n  const [counter, setCounter] = useState(0);\n  const inc = useCallback(() => setCounter(counter => counter + 1), [setCounter]); // add to counter\n\n  const dec = useCallback(() => setCounter(counter => counter - 1), [setCounter]); // remove from counter\n\n  const interceptors = useMemo(() => ({\n    request: config => (inc(), config),\n    response: response => (dec(), response),\n    error: error => (dec(), Promise.reject(error))\n  }), [inc, dec]); // create the interceptors\n\n  useEffect(() => {\n    // add request interceptors\n    const reqInterceptor = axiosConfig.interceptors.request.use(interceptors.request, interceptors.error); // add response interceptors\n\n    const resInterceptor = axiosConfig.interceptors.response.use(interceptors.response, interceptors.error);\n    return () => {\n      // remove all intercepts when done\n      axiosConfig.interceptors.request.eject(reqInterceptor);\n      axiosConfig.interceptors.response.eject(resInterceptor);\n    };\n  }, [interceptors]);\n  return [counter > 0];\n};\n\nexport { axiosConfig, useAxiosLoader };","map":{"version":3,"sources":["C:/Users/antho/OneDrive/Desktop/naf2022-front/src/config/axiosConfig.js"],"names":["axios","config","useState","useCallback","useMemo","useEffect","axiosConfig","create","baseURL","backendUrl","withCredentials","useAxiosLoader","counter","setCounter","inc","dec","interceptors","request","response","error","Promise","reject","reqInterceptor","use","resInterceptor","eject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyCC,SAAzC,QAA0D,OAA1D,C,CACA;;AACA,MAAMC,WAAW,GAAGN,KAAK,CAACO,MAAN,CAAa;AAC/B;AACAC,EAAAA,OAAO,EAAG,GAAEP,MAAM,CAACQ,UAAW,MAFC;AAG/BC,EAAAA,eAAe,EAAE;AAHc,CAAb,CAApB;;AAMA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMY,GAAG,GAAGX,WAAW,CAAC,MAAMU,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAjB,EAA6C,CAClEC,UADkE,CAA7C,CAAvB,CAF2B,CAIvB;;AACJ,QAAME,GAAG,GAAGZ,WAAW,CAAC,MAAMU,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAjB,EAA6C,CAClEC,UADkE,CAA7C,CAAvB,CAL2B,CAOvB;;AAEJ,QAAMG,YAAY,GAAGZ,OAAO,CAC1B,OAAO;AACLa,IAAAA,OAAO,EAAGhB,MAAD,KAAaa,GAAG,IAAIb,MAApB,CADJ;AAELiB,IAAAA,QAAQ,EAAGA,QAAD,KAAeH,GAAG,IAAIG,QAAtB,CAFL;AAGLC,IAAAA,KAAK,EAAGA,KAAD,KAAYJ,GAAG,IAAIK,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAnB;AAHF,GAAP,CAD0B,EAM1B,CAACL,GAAD,EAAMC,GAAN,CAN0B,CAA5B,CAT2B,CAgBxB;;AAEHV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMiB,cAAc,GAAGhB,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCM,GAAjC,CACrBP,YAAY,CAACC,OADQ,EAErBD,YAAY,CAACG,KAFQ,CAAvB,CAFc,CAMd;;AACA,UAAMK,cAAc,GAAGlB,WAAW,CAACU,YAAZ,CAAyBE,QAAzB,CAAkCK,GAAlC,CACrBP,YAAY,CAACE,QADQ,EAErBF,YAAY,CAACG,KAFQ,CAAvB;AAIA,WAAO,MAAM;AACX;AACAb,MAAAA,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCQ,KAAjC,CAAuCH,cAAvC;AACAhB,MAAAA,WAAW,CAACU,YAAZ,CAAyBE,QAAzB,CAAkCO,KAAlC,CAAwCD,cAAxC;AACD,KAJD;AAKD,GAhBQ,EAgBN,CAACR,YAAD,CAhBM,CAAT;AAkBA,SAAO,CAACJ,OAAO,GAAG,CAAX,CAAP;AACD,CArCD;;AAuCA,SAASN,WAAT,EAAsBK,cAAtB","sourcesContent":["import axios from 'axios';\nimport config from '../config/env';\nimport { useState, useCallback, useMemo, useEffect } from 'react';\n// Next we make an 'instance' of it\nconst axiosConfig = axios.create({\n  // .. where we make our configurations\n  baseURL: `${config.backendUrl}/api`,\n  withCredentials: true,\n});\n\nconst useAxiosLoader = () => {\n  const [counter, setCounter] = useState(0);\n  const inc = useCallback(() => setCounter((counter) => counter + 1), [\n    setCounter,\n  ]); // add to counter\n  const dec = useCallback(() => setCounter((counter) => counter - 1), [\n    setCounter,\n  ]); // remove from counter\n\n  const interceptors = useMemo(\n    () => ({\n      request: (config) => (inc(), config),\n      response: (response) => (dec(), response),\n      error: (error) => (dec(), Promise.reject(error)),\n    }),\n    [inc, dec]\n  ); // create the interceptors\n\n  useEffect(() => {\n    // add request interceptors\n    const reqInterceptor = axiosConfig.interceptors.request.use(\n      interceptors.request,\n      interceptors.error\n    );\n    // add response interceptors\n    const resInterceptor = axiosConfig.interceptors.response.use(\n      interceptors.response,\n      interceptors.error\n    );\n    return () => {\n      // remove all intercepts when done\n      axiosConfig.interceptors.request.eject(reqInterceptor);\n      axiosConfig.interceptors.response.eject(resInterceptor);\n    };\n  }, [interceptors]);\n\n  return [counter > 0];\n};\n\nexport { axiosConfig, useAxiosLoader };\n"]},"metadata":{},"sourceType":"module"}