{"ast":null,"code":"import { axiosConfig } from '../config/axiosConfig';\nimport config from '../config/env';\nconst baseUrl = config.endpoints.orders;\n\nconst getOrders = async (verified = null) => {\n  try {\n    const res = await axiosConfig({\n      method: 'get',\n      url: `${baseUrl}/`,\n      params: {\n        verified\n      }\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst downloadOrdersAdmin = async () => {\n  try {\n    const res = await axiosConfig({\n      method: 'get',\n      url: `${baseUrl}/admindownload/`,\n      responseType: 'blob'\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst downloadOrdersVendor = async vendor_id => {\n  console.log(`${baseUrl}/vendordownload/${vendor_id}`);\n\n  try {\n    const res = await axiosConfig({\n      method: 'get',\n      url: `${baseUrl}/vendordownload/${vendor_id}`,\n      responseType: 'blob'\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst getIndivOrder = async order_id => {\n  const {\n    data\n  } = await axiosConfig({\n    method: 'get',\n    url: `${baseUrl}/${order_id}/`\n  });\n  return data;\n};\n\nconst postOrder = async newOrder => {\n  try {\n    const res = await axiosConfig({\n      method: 'post',\n      url: `${baseUrl}/`,\n      data: newOrder\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst downloadOrders = async () => {\n  try {\n    const res = await axiosConfig({\n      method: 'get',\n      url: `${baseUrl}/download/`,\n      responseType: 'blob'\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst deleteOrder = async order_id => {\n  try {\n    const res = await axiosConfig({\n      method: 'delete',\n      url: `${baseUrl}/${order_id}/`\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nexport default {\n  getOrders,\n  getIndivOrder,\n  postOrder,\n  downloadOrders,\n  downloadOrdersAdmin,\n  downloadOrdersVendor,\n  deleteOrder\n};","map":{"version":3,"sources":["C:/Users/antho/OneDrive/Desktop/naf2022-front/src/services/orders.js"],"names":["axiosConfig","config","baseUrl","endpoints","orders","getOrders","verified","res","method","url","params","err","response","downloadOrdersAdmin","responseType","downloadOrdersVendor","vendor_id","console","log","getIndivOrder","order_id","data","postOrder","newOrder","downloadOrders","deleteOrder"],"mappings":"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","sourcesContent":["import { axiosConfig } from '../config/axiosConfig';\nimport config from '../config/env';\nconst baseUrl = config.endpoints.orders;\n\nconst getOrders = async (verified = null) => {\n  try {\n    const res = await axiosConfig({\n      method: 'get',\n      url: `${baseUrl}/`,\n      params: {\n        verified,\n      },\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst downloadOrdersAdmin = async () => {\n  try {\n    const res = await axiosConfig({\n      method: 'get',\n      url: `${baseUrl}/admindownload/`,\n      responseType: 'blob',\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst downloadOrdersVendor = async (vendor_id) => {\n  console.log(`${baseUrl}/vendordownload/${vendor_id}`);\n  try {\n    const res = await axiosConfig({\n      method: 'get',\n      url: `${baseUrl}/vendordownload/${vendor_id}`,\n      responseType: 'blob',\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst getIndivOrder = async (order_id) => {\n  const { data } = await axiosConfig({\n    method: 'get',\n    url: `${baseUrl}/${order_id}/`,\n  });\n  return data;\n};\n\nconst postOrder = async (newOrder) => {\n  try {\n    const res = await axiosConfig({\n      method: 'post',\n      url: `${baseUrl}/`,\n      data: newOrder,\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst downloadOrders = async () => {\n  try {\n    const res = await axiosConfig({\n      method: 'get',\n      url: `${baseUrl}/download/`,\n      responseType: 'blob',\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nconst deleteOrder = async (order_id) => {\n  try {\n    const res = await axiosConfig({\n      method: 'delete',\n      url: `${baseUrl}/${order_id}/`,\n    });\n    return res;\n  } catch (err) {\n    return err.response;\n  }\n};\n\nexport default {\n  getOrders,\n  getIndivOrder,\n  postOrder,\n  downloadOrders,\n  downloadOrdersAdmin,\n  downloadOrdersVendor,\n  deleteOrder,\n};\n"]},"metadata":{},"sourceType":"module"}