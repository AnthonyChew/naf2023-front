{"ast":null,"code":"/* eslint-disable consistent-return */\n\n/* eslint-disable comma-dangle */\n\n/* eslint-disable no-console */\nimport roundTo from '../utils/RoundingOff';\nconst initState = {\n  addedProducts: [],\n  total: 0\n};\nexport const addProductToCart = product => async dispatch => {\n  dispatch({\n    type: 'ADD_TO_CART',\n    data: product\n  });\n};\nexport const removeProductFromCart = (_id, size, colour) => async (dispatch) => {\n  dispatch({\n    type: 'REMOVE_FROM_CART',\n    data: {\n      _id,\n      size,\n      colour\n    }\n  });\n};\nexport const changeQtyInCart = (product, type, stock) => async dispatch => {\n  dispatch({\n    type: 'CHANGE_QTY_FROM_CART',\n    data: {\n      product,\n      type,\n      stock\n    }\n  });\n};\nexport const resetCart = () => async dispatch => {\n  dispatch({\n    type: 'RESET'\n  });\n};\n\nconst cartReducer = (state = initState, action) => {\n  // console.log(action.type);\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      {\n        const addedProduct = action.data; // console.log('Added product: ' + addedProduct);\n\n        const newTotal = state.total + addedProduct.price * addedProduct.quantity;\n        const itemExists = state.addedProducts.find(product => addedProduct._id === product._id);\n\n        if (itemExists) {\n          let row = 0;\n          let col = 0;\n\n          if (addedProduct.colours.length !== 0) {\n            row = addedProduct.colours.indexOf(addedProduct.colour);\n          }\n\n          if (addedProduct.sizes.length !== 0) {\n            col = addedProduct.sizes.indexOf(addedProduct.size);\n          } // console.log(itemExists);\n          // console.log(itemExists.quantity[row][col]);\n          // console.log(addedProduct.stock[row][col]);\n          // console.log(addedProduct.quantity);\n\n\n          if (itemExists.quantity[row][col] + addedProduct.quantity <= addedProduct.stock[row][col]) {\n            itemExists.quantity[row][col] += addedProduct.quantity;\n            itemExists.totalQty += addedProduct.quantity;\n          } else {\n            alert('Insufficient stock. Check your cart.');\n            return state;\n          } // console.log(\n          //   ` new added product (exists) ${JSON.stringify(itemExists)}`\n          // );\n\n\n          return { ...state,\n            addedProducts: state.addedProducts.map(product => {\n              if (product._id !== addedProduct._id) {\n                return product;\n              } else {\n                // updates the variation in quantity FIXME: get r_id of this when change to using the table?\n                const {\n                  variations\n                } = product;\n                const varExists = variations.find(pdt => pdt.colour === addedProduct.colour && pdt.size === addedProduct.size);\n\n                if (varExists) {\n                  product.variations = variations.map(pdt => {\n                    if (pdt.colour === addedProduct.colour && pdt.size === addedProduct.size) {\n                      pdt.quantity += addedProduct.quantity;\n                    }\n\n                    return pdt;\n                  });\n                } else {\n                  product.variations = [...variations, addedProduct];\n                }\n\n                return product;\n              }\n            }),\n            total: roundTo(newTotal)\n          };\n        } //Does not exist\n\n\n        let newProduct = {}; // create the 2d matrix\n\n        let quantity;\n\n        if (addedProduct.colours.length !== 0) {\n          quantity = [];\n          addedProduct.colours.forEach((colour, i) => {\n            quantity.push([]);\n\n            if (addedProduct.sizes.length !== 0) {\n              addedProduct.sizes.forEach(size => {\n                if (colour === addedProduct.colour && addedProduct.size === size) {\n                  quantity[i].push(addedProduct.quantity);\n                } else {\n                  quantity[i].push(0);\n                }\n              });\n            } else {\n              if (colour === addedProduct.colour) {\n                quantity[i].push(addedProduct.quantity);\n              } else {\n                quantity[i].push(0);\n              }\n            }\n          });\n        } else {\n          quantity = [[]];\n\n          if (addedProduct.sizes.length !== 0) {\n            addedProduct.sizes.forEach((size, i) => {\n              if (addedProduct.size === size) {\n                quantity[0].push(addedProduct.quantity);\n              } else {\n                quantity[0].push(0);\n              }\n            });\n          } else {\n            quantity[0].push(addedProduct.quantity);\n          }\n        }\n\n        newProduct = { ...addedProduct,\n          variations: [addedProduct],\n          quantity: quantity,\n          totalQty: addedProduct.quantity,\n          colour: null,\n          size: null\n        }; // console.log(` new added product ${JSON.stringify(newProduct)}`);\n\n        return { ...state,\n          addedProducts: [...state.addedProducts, newProduct],\n          total: roundTo(newTotal)\n        };\n      }\n    // Make this adjustable for diff variations\n\n    case 'REMOVE_FROM_CART':\n      {\n        const {\n          _id,\n          colour,\n          size\n        } = action.data; // Find the product with _id\n\n        const itemExists = state.addedProducts.find(product => _id === product._id);\n        const {\n          variations,\n          colours,\n          sizes,\n          price\n        } = itemExists; // Set quantity to 0\n\n        let row = 0;\n        let col = 0;\n\n        if (colours.length !== 0) {\n          row = colours.indexOf(colour);\n        }\n\n        if (sizes.length !== 0) {\n          col = sizes.indexOf(size);\n        }\n\n        const qty = itemExists.quantity[row][col];\n        itemExists.quantity[row][col] = 0;\n        itemExists.totalQty -= qty; // Find the remainder variations\n\n        const remainingVariations = variations.filter(variation => variation.colour !== colour || variation.size !== size); // Set variations to the remainders\n\n        itemExists.variations = remainingVariations;\n        let remainingProducts = state.addedProducts; // If no more variations, remove the product\n\n        if (remainingVariations.length === 0) {\n          remainingProducts = remainingProducts.filter(product => product._id !== _id);\n        } else {\n          //Else, replace the existing product with the changed product\n          remainingProducts = remainingProducts.map(product => product._id !== _id ? product : itemExists);\n        }\n\n        const newTotal = state.total - price * qty;\n\n        if (remainingProducts.length > 0) {\n          return { ...state,\n            addedProducts: remainingProducts,\n            total: roundTo(newTotal)\n          };\n        } else {\n          return initState;\n        }\n      }\n\n    case 'CHANGE_QTY_FROM_CART':\n      {\n        const changeProduct = action.data.product; // console.log(changeProduct);\n\n        const stock = action.data.stock;\n        const changeType = action.data.type;\n        const itemExists = state.addedProducts.find(product => changeProduct._id === product._id);\n        const {\n          variations,\n          quantity\n        } = itemExists;\n        let row = 0;\n        let col = 0;\n\n        if (changeProduct.colours.length !== 0) {\n          row = changeProduct.colours.indexOf(changeProduct.colour);\n        }\n\n        if (changeProduct.sizes.length !== 0) {\n          col = changeProduct.sizes.indexOf(changeProduct.size);\n        }\n\n        let newTotal = roundTo(state.total); //FIXME remove variations if using table\n        // console.log(stock);\n\n        const newVariations = variations.map(pdt => {\n          if (pdt.colour === changeProduct.colour && pdt.size === changeProduct.size) {\n            if (changeType === 'INCREASE' && quantity[row][col] < stock[row][col]) {\n              quantity[row][col] += 1;\n              pdt.quantity += 1;\n              itemExists.totalQty += 1;\n              newTotal = roundTo(state.total + pdt.price);\n            } else if (changeType === 'DECREASE') {\n              quantity[row][col] -= 1;\n              pdt.quantity -= 1;\n              itemExists.totalQty -= 1;\n              newTotal = roundTo(state.total - pdt.price);\n            }\n          }\n\n          return pdt;\n        });\n        let updateProduct = null;\n        updateProduct = { ...itemExists,\n          quantity,\n          variations: newVariations\n        };\n        const changedProducts = state.addedProducts.map(product => product._id !== changeProduct._id ? product : updateProduct);\n        return { ...state,\n          total: newTotal,\n          addedProducts: changedProducts\n        };\n      }\n\n    case 'RESET':\n      return initState;\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["C:/Users/antho/OneDrive/Desktop/naf2022-front/src/reducers/CartReducer.js"],"names":["roundTo","initState","addedProducts","total","addProductToCart","product","dispatch","type","data","removeProductFromCart","_id","size","colour","changeQtyInCart","stock","resetCart","cartReducer","state","action","addedProduct","newTotal","price","quantity","itemExists","find","row","col","colours","length","indexOf","sizes","totalQty","alert","map","variations","varExists","pdt","newProduct","forEach","i","push","qty","remainingVariations","filter","variation","remainingProducts","changeProduct","changeType","newVariations","updateProduct","changedProducts"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable comma-dangle */\n/* eslint-disable no-console */\nimport roundTo from '../utils/RoundingOff';\n\nconst initState = {\n  addedProducts: [],\n  total: 0,\n};\n\nexport const addProductToCart = (product) => async (dispatch) => {\n  dispatch({\n    type: 'ADD_TO_CART',\n    data: product,\n  });\n};\n\nexport const removeProductFromCart = (_id, size, colour) => async (\n  dispatch\n) => {\n  dispatch({\n    type: 'REMOVE_FROM_CART',\n    data: {\n      _id,\n      size,\n      colour,\n    },\n  });\n};\n\nexport const changeQtyInCart = (product, type, stock) => async (dispatch) => {\n  dispatch({\n    type: 'CHANGE_QTY_FROM_CART',\n    data: {\n      product,\n      type,\n      stock,\n    },\n  });\n};\n\nexport const resetCart = () => async (dispatch) => {\n  dispatch({\n    type: 'RESET',\n  });\n};\n\nconst cartReducer = (state = initState, action) => {\n  // console.log(action.type);\n  switch (action.type) {\n    case 'ADD_TO_CART': {\n      const addedProduct = action.data;\n      // console.log('Added product: ' + addedProduct);\n      const newTotal = state.total + addedProduct.price * addedProduct.quantity;\n      const itemExists = state.addedProducts.find(\n        (product) => addedProduct._id === product._id\n      );\n      if (itemExists) {\n        let row = 0;\n        let col = 0;\n        if (addedProduct.colours.length !== 0) {\n          row = addedProduct.colours.indexOf(addedProduct.colour);\n        }\n        if (addedProduct.sizes.length !== 0) {\n          col = addedProduct.sizes.indexOf(addedProduct.size);\n        }\n        // console.log(itemExists);\n        // console.log(itemExists.quantity[row][col]);\n        // console.log(addedProduct.stock[row][col]);\n        // console.log(addedProduct.quantity);\n        if (\n          itemExists.quantity[row][col] + addedProduct.quantity <=\n          addedProduct.stock[row][col]\n        ) {\n          itemExists.quantity[row][col] += addedProduct.quantity;\n          itemExists.totalQty += addedProduct.quantity;\n        } else {\n          alert('Insufficient stock. Check your cart.');\n          return state;\n        }\n        // console.log(\n        //   ` new added product (exists) ${JSON.stringify(itemExists)}`\n        // );\n        return {\n          ...state,\n          addedProducts: state.addedProducts.map((product) => {\n            if (product._id !== addedProduct._id) {\n              return product;\n            } else {\n              // updates the variation in quantity FIXME: get r_id of this when change to using the table?\n              const { variations } = product;\n              const varExists = variations.find(\n                (pdt) =>\n                  pdt.colour === addedProduct.colour &&\n                  pdt.size === addedProduct.size\n              );\n              if (varExists) {\n                product.variations = variations.map((pdt) => {\n                  if (\n                    pdt.colour === addedProduct.colour &&\n                    pdt.size === addedProduct.size\n                  ) {\n                    pdt.quantity += addedProduct.quantity;\n                  }\n                  return pdt;\n                });\n              } else {\n                product.variations = [...variations, addedProduct];\n              }\n              return product;\n            }\n          }),\n          total: roundTo(newTotal),\n        };\n      }\n      //Does not exist\n      let newProduct = {};\n      // create the 2d matrix\n      let quantity;\n      if (addedProduct.colours.length !== 0) {\n        quantity = [];\n        addedProduct.colours.forEach((colour, i) => {\n          quantity.push([]);\n          if (addedProduct.sizes.length !== 0) {\n            addedProduct.sizes.forEach((size) => {\n              if (\n                colour === addedProduct.colour &&\n                addedProduct.size === size\n              ) {\n                quantity[i].push(addedProduct.quantity);\n              } else {\n                quantity[i].push(0);\n              }\n            });\n          } else {\n            if (colour === addedProduct.colour) {\n              quantity[i].push(addedProduct.quantity);\n            } else {\n              quantity[i].push(0);\n            }\n          }\n        });\n      } else {\n        quantity = [[]];\n        if (addedProduct.sizes.length !== 0) {\n          addedProduct.sizes.forEach((size, i) => {\n            if (addedProduct.size === size) {\n              quantity[0].push(addedProduct.quantity);\n            } else {\n              quantity[0].push(0);\n            }\n          });\n        } else {\n          quantity[0].push(addedProduct.quantity);\n        }\n      }\n      newProduct = {\n        ...addedProduct,\n        variations: [addedProduct],\n        quantity: quantity,\n        totalQty: addedProduct.quantity,\n        colour: null,\n        size: null,\n      };\n      // console.log(` new added product ${JSON.stringify(newProduct)}`);\n      return {\n        ...state,\n        addedProducts: [...state.addedProducts, newProduct],\n        total: roundTo(newTotal),\n      };\n    }\n    // Make this adjustable for diff variations\n    case 'REMOVE_FROM_CART': {\n      const { _id, colour, size } = action.data;\n      // Find the product with _id\n      const itemExists = state.addedProducts.find(\n        (product) => _id === product._id\n      );\n      const { variations, colours, sizes, price } = itemExists;\n      // Set quantity to 0\n      let row = 0;\n      let col = 0;\n      if (colours.length !== 0) {\n        row = colours.indexOf(colour);\n      }\n      if (sizes.length !== 0) {\n        col = sizes.indexOf(size);\n      }\n      const qty = itemExists.quantity[row][col];\n      itemExists.quantity[row][col] = 0;\n      itemExists.totalQty -= qty;\n\n      // Find the remainder variations\n      const remainingVariations = variations.filter(\n        (variation) => variation.colour !== colour || variation.size !== size\n      );\n      // Set variations to the remainders\n      itemExists.variations = remainingVariations;\n\n      let remainingProducts = state.addedProducts;\n      // If no more variations, remove the product\n      if (remainingVariations.length === 0) {\n        remainingProducts = remainingProducts.filter(\n          (product) => product._id !== _id\n        );\n      } else {\n        //Else, replace the existing product with the changed product\n        remainingProducts = remainingProducts.map((product) =>\n          product._id !== _id ? product : itemExists\n        );\n      }\n      const newTotal = state.total - price * qty;\n      if (remainingProducts.length > 0) {\n        return {\n          ...state,\n          addedProducts: remainingProducts,\n          total: roundTo(newTotal),\n        };\n      } else {\n        return initState;\n      }\n    }\n    case 'CHANGE_QTY_FROM_CART': {\n      const changeProduct = action.data.product;\n      // console.log(changeProduct);\n      const stock = action.data.stock;\n      const changeType = action.data.type;\n      const itemExists = state.addedProducts.find(\n        (product) => changeProduct._id === product._id\n      );\n      const { variations, quantity } = itemExists;\n      let row = 0;\n      let col = 0;\n      if (changeProduct.colours.length !== 0) {\n        row = changeProduct.colours.indexOf(changeProduct.colour);\n      }\n      if (changeProduct.sizes.length !== 0) {\n        col = changeProduct.sizes.indexOf(changeProduct.size);\n      }\n      let newTotal = roundTo(state.total);\n      //FIXME remove variations if using table\n      // console.log(stock);\n      const newVariations = variations.map((pdt) => {\n        if (\n          pdt.colour === changeProduct.colour &&\n          pdt.size === changeProduct.size\n        ) {\n          if (\n            changeType === 'INCREASE' &&\n            quantity[row][col] < stock[row][col]\n          ) {\n            quantity[row][col] += 1;\n            pdt.quantity += 1;\n            itemExists.totalQty += 1;\n            newTotal = roundTo(state.total + pdt.price);\n          } else if (changeType === 'DECREASE') {\n            quantity[row][col] -= 1;\n            pdt.quantity -= 1;\n            itemExists.totalQty -= 1;\n            newTotal = roundTo(state.total - pdt.price);\n          }\n        }\n        return pdt;\n      });\n      let updateProduct = null;\n      updateProduct = {\n        ...itemExists,\n        quantity,\n        variations: newVariations,\n      };\n      const changedProducts = state.addedProducts.map((product) =>\n        product._id !== changeProduct._id ? product : updateProduct\n      );\n      return {\n        ...state,\n        total: newTotal,\n        addedProducts: changedProducts,\n      };\n    }\n    case 'RESET':\n      return initState;\n    default:\n      return state;\n  }\n};\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}