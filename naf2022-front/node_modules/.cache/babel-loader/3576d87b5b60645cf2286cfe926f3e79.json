{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\antho\\\\OneDrive\\\\Desktop\\\\naf2022-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\antho\\\\OneDrive\\\\Desktop\\\\naf2022-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:\\\\Users\\\\antho\\\\OneDrive\\\\Desktop\\\\naf2022-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\antho\\\\OneDrive\\\\Desktop\\\\naf2022-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";/* eslint-disable consistent-return */ /* eslint-disable comma-dangle */ /* eslint-disable no-console */import roundTo from'../utils/RoundingOff';var initState={addedProducts:[],total:0};export var addProductToCart=function addProductToCart(product){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:'ADD_TO_CART',data:product});case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var removeProductFromCart=function removeProductFromCart(_id,size,colour){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch({type:'REMOVE_FROM_CART',data:{_id:_id,size:size,colour:colour}});case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var changeQtyInCart=function changeQtyInCart(product,type,stock){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:dispatch({type:'CHANGE_QTY_FROM_CART',data:{product:product,type:type,stock:stock}});case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var resetCart=function resetCart(){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:dispatch({type:'RESET'});case 1:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};var cartReducer=function cartReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initState;var action=arguments.length>1?arguments[1]:undefined;// console.log(action.type);\nswitch(action.type){case'ADD_TO_CART':{var addedProduct=action.data;// console.log('Added product: ' + addedProduct);\nvar newTotal=state.total+addedProduct.price*addedProduct.quantity;var itemExists=state.addedProducts.find(function(product){return addedProduct._id===product._id;});if(itemExists){var row=0;var col=0;if(addedProduct.colours.length!==0){row=addedProduct.colours.indexOf(addedProduct.colour);}if(addedProduct.sizes.length!==0){col=addedProduct.sizes.indexOf(addedProduct.size);}// console.log(itemExists);\n// console.log(itemExists.quantity[row][col]);\n// console.log(addedProduct.stock[row][col]);\n// console.log(addedProduct.quantity);\nif(itemExists.quantity[row][col]+addedProduct.quantity<=addedProduct.stock[row][col]){itemExists.quantity[row][col]+=addedProduct.quantity;itemExists.totalQty+=addedProduct.quantity;}else{alert('Insufficient stock. Check your cart.');return state;}// console.log(\n//   ` new added product (exists) ${JSON.stringify(itemExists)}`\n// );\nreturn _objectSpread(_objectSpread({},state),{},{addedProducts:state.addedProducts.map(function(product){if(product._id!==addedProduct._id){return product;}else{// updates the variation in quantity FIXME: get r_id of this when change to using the table?\nvar variations=product.variations;var varExists=variations.find(function(pdt){return pdt.colour===addedProduct.colour&&pdt.size===addedProduct.size;});if(varExists){product.variations=variations.map(function(pdt){if(pdt.colour===addedProduct.colour&&pdt.size===addedProduct.size){pdt.quantity+=addedProduct.quantity;}return pdt;});}else{product.variations=[].concat(_toConsumableArray(variations),[addedProduct]);}return product;}}),total:roundTo(newTotal)});}//Does not exist\nvar newProduct={};// create the 2d matrix\nvar quantity;if(addedProduct.colours.length!==0){quantity=[];addedProduct.colours.forEach(function(colour,i){quantity.push([]);if(addedProduct.sizes.length!==0){addedProduct.sizes.forEach(function(size){if(colour===addedProduct.colour&&addedProduct.size===size){quantity[i].push(addedProduct.quantity);}else{quantity[i].push(0);}});}else{if(colour===addedProduct.colour){quantity[i].push(addedProduct.quantity);}else{quantity[i].push(0);}}});}else{quantity=[[]];if(addedProduct.sizes.length!==0){addedProduct.sizes.forEach(function(size,i){if(addedProduct.size===size){quantity[0].push(addedProduct.quantity);}else{quantity[0].push(0);}});}else{quantity[0].push(addedProduct.quantity);}}newProduct=_objectSpread(_objectSpread({},addedProduct),{},{variations:[addedProduct],quantity:quantity,totalQty:addedProduct.quantity,colour:null,size:null});// console.log(` new added product ${JSON.stringify(newProduct)}`);\nreturn _objectSpread(_objectSpread({},state),{},{addedProducts:[].concat(_toConsumableArray(state.addedProducts),[newProduct]),total:roundTo(newTotal)});}// Make this adjustable for diff variations\ncase'REMOVE_FROM_CART':{var _action$data=action.data,_id=_action$data._id,colour=_action$data.colour,size=_action$data.size;// Find the product with _id\nvar _itemExists=state.addedProducts.find(function(product){return _id===product._id;});var variations=_itemExists.variations,colours=_itemExists.colours,sizes=_itemExists.sizes,price=_itemExists.price;// Set quantity to 0\nvar _row=0;var _col=0;if(colours.length!==0){_row=colours.indexOf(colour);}if(sizes.length!==0){_col=sizes.indexOf(size);}var qty=_itemExists.quantity[_row][_col];_itemExists.quantity[_row][_col]=0;_itemExists.totalQty-=qty;// Find the remainder variations\nvar remainingVariations=variations.filter(function(variation){return variation.colour!==colour||variation.size!==size;});// Set variations to the remainders\n_itemExists.variations=remainingVariations;var remainingProducts=state.addedProducts;// If no more variations, remove the product\nif(remainingVariations.length===0){remainingProducts=remainingProducts.filter(function(product){return product._id!==_id;});}else{//Else, replace the existing product with the changed product\nremainingProducts=remainingProducts.map(function(product){return product._id!==_id?product:_itemExists;});}var _newTotal=state.total-price*qty;if(remainingProducts.length>0){return _objectSpread(_objectSpread({},state),{},{addedProducts:remainingProducts,total:roundTo(_newTotal)});}else{return initState;}}case'CHANGE_QTY_FROM_CART':{var changeProduct=action.data.product;// console.log(changeProduct);\nvar stock=action.data.stock;var changeType=action.data.type;var _itemExists2=state.addedProducts.find(function(product){return changeProduct._id===product._id;});var _variations=_itemExists2.variations,_quantity=_itemExists2.quantity;var _row2=0;var _col2=0;if(changeProduct.colours.length!==0){_row2=changeProduct.colours.indexOf(changeProduct.colour);}if(changeProduct.sizes.length!==0){_col2=changeProduct.sizes.indexOf(changeProduct.size);}var _newTotal2=roundTo(state.total);//FIXME remove variations if using table\n// console.log(stock);\nvar newVariations=_variations.map(function(pdt){if(pdt.colour===changeProduct.colour&&pdt.size===changeProduct.size){if(changeType==='INCREASE'&&_quantity[_row2][_col2]<stock[_row2][_col2]){_quantity[_row2][_col2]+=1;pdt.quantity+=1;_itemExists2.totalQty+=1;_newTotal2=roundTo(state.total+pdt.price);}else if(changeType==='DECREASE'){_quantity[_row2][_col2]-=1;pdt.quantity-=1;_itemExists2.totalQty-=1;_newTotal2=roundTo(state.total-pdt.price);}}return pdt;});var updateProduct=null;updateProduct=_objectSpread(_objectSpread({},_itemExists2),{},{quantity:_quantity,variations:newVariations});var changedProducts=state.addedProducts.map(function(product){return product._id!==changeProduct._id?product:updateProduct;});return _objectSpread(_objectSpread({},state),{},{total:_newTotal2,addedProducts:changedProducts});}case'RESET':return initState;default:return state;}};export default cartReducer;","map":{"version":3,"sources":["C:/Users/antho/OneDrive/Desktop/naf2022-front/src/reducers/CartReducer.js"],"names":["roundTo","initState","addedProducts","total","addProductToCart","product","dispatch","type","data","removeProductFromCart","_id","size","colour","changeQtyInCart","stock","resetCart","cartReducer","state","action","addedProduct","newTotal","price","quantity","itemExists","find","row","col","colours","length","indexOf","sizes","totalQty","alert","map","variations","varExists","pdt","newProduct","forEach","i","push","qty","remainingVariations","filter","variation","remainingProducts","changeProduct","changeType","newVariations","updateProduct","changedProducts"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable comma-dangle */\n/* eslint-disable no-console */\nimport roundTo from '../utils/RoundingOff';\n\nconst initState = {\n  addedProducts: [],\n  total: 0,\n};\n\nexport const addProductToCart = (product) => async (dispatch) => {\n  dispatch({\n    type: 'ADD_TO_CART',\n    data: product,\n  });\n};\n\nexport const removeProductFromCart = (_id, size, colour) => async (\n  dispatch\n) => {\n  dispatch({\n    type: 'REMOVE_FROM_CART',\n    data: {\n      _id,\n      size,\n      colour,\n    },\n  });\n};\n\nexport const changeQtyInCart = (product, type, stock) => async (dispatch) => {\n  dispatch({\n    type: 'CHANGE_QTY_FROM_CART',\n    data: {\n      product,\n      type,\n      stock,\n    },\n  });\n};\n\nexport const resetCart = () => async (dispatch) => {\n  dispatch({\n    type: 'RESET',\n  });\n};\n\nconst cartReducer = (state = initState, action) => {\n  // console.log(action.type);\n  switch (action.type) {\n    case 'ADD_TO_CART': {\n      const addedProduct = action.data;\n      // console.log('Added product: ' + addedProduct);\n      const newTotal = state.total + addedProduct.price * addedProduct.quantity;\n      const itemExists = state.addedProducts.find(\n        (product) => addedProduct._id === product._id\n      );\n      if (itemExists) {\n        let row = 0;\n        let col = 0;\n        if (addedProduct.colours.length !== 0) {\n          row = addedProduct.colours.indexOf(addedProduct.colour);\n        }\n        if (addedProduct.sizes.length !== 0) {\n          col = addedProduct.sizes.indexOf(addedProduct.size);\n        }\n        // console.log(itemExists);\n        // console.log(itemExists.quantity[row][col]);\n        // console.log(addedProduct.stock[row][col]);\n        // console.log(addedProduct.quantity);\n        if (\n          itemExists.quantity[row][col] + addedProduct.quantity <=\n          addedProduct.stock[row][col]\n        ) {\n          itemExists.quantity[row][col] += addedProduct.quantity;\n          itemExists.totalQty += addedProduct.quantity;\n        } else {\n          alert('Insufficient stock. Check your cart.');\n          return state;\n        }\n        // console.log(\n        //   ` new added product (exists) ${JSON.stringify(itemExists)}`\n        // );\n        return {\n          ...state,\n          addedProducts: state.addedProducts.map((product) => {\n            if (product._id !== addedProduct._id) {\n              return product;\n            } else {\n              // updates the variation in quantity FIXME: get r_id of this when change to using the table?\n              const { variations } = product;\n              const varExists = variations.find(\n                (pdt) =>\n                  pdt.colour === addedProduct.colour &&\n                  pdt.size === addedProduct.size\n              );\n              if (varExists) {\n                product.variations = variations.map((pdt) => {\n                  if (\n                    pdt.colour === addedProduct.colour &&\n                    pdt.size === addedProduct.size\n                  ) {\n                    pdt.quantity += addedProduct.quantity;\n                  }\n                  return pdt;\n                });\n              } else {\n                product.variations = [...variations, addedProduct];\n              }\n              return product;\n            }\n          }),\n          total: roundTo(newTotal),\n        };\n      }\n      //Does not exist\n      let newProduct = {};\n      // create the 2d matrix\n      let quantity;\n      if (addedProduct.colours.length !== 0) {\n        quantity = [];\n        addedProduct.colours.forEach((colour, i) => {\n          quantity.push([]);\n          if (addedProduct.sizes.length !== 0) {\n            addedProduct.sizes.forEach((size) => {\n              if (\n                colour === addedProduct.colour &&\n                addedProduct.size === size\n              ) {\n                quantity[i].push(addedProduct.quantity);\n              } else {\n                quantity[i].push(0);\n              }\n            });\n          } else {\n            if (colour === addedProduct.colour) {\n              quantity[i].push(addedProduct.quantity);\n            } else {\n              quantity[i].push(0);\n            }\n          }\n        });\n      } else {\n        quantity = [[]];\n        if (addedProduct.sizes.length !== 0) {\n          addedProduct.sizes.forEach((size, i) => {\n            if (addedProduct.size === size) {\n              quantity[0].push(addedProduct.quantity);\n            } else {\n              quantity[0].push(0);\n            }\n          });\n        } else {\n          quantity[0].push(addedProduct.quantity);\n        }\n      }\n      newProduct = {\n        ...addedProduct,\n        variations: [addedProduct],\n        quantity: quantity,\n        totalQty: addedProduct.quantity,\n        colour: null,\n        size: null,\n      };\n      // console.log(` new added product ${JSON.stringify(newProduct)}`);\n      return {\n        ...state,\n        addedProducts: [...state.addedProducts, newProduct],\n        total: roundTo(newTotal),\n      };\n    }\n    // Make this adjustable for diff variations\n    case 'REMOVE_FROM_CART': {\n      const { _id, colour, size } = action.data;\n      // Find the product with _id\n      const itemExists = state.addedProducts.find(\n        (product) => _id === product._id\n      );\n      const { variations, colours, sizes, price } = itemExists;\n      // Set quantity to 0\n      let row = 0;\n      let col = 0;\n      if (colours.length !== 0) {\n        row = colours.indexOf(colour);\n      }\n      if (sizes.length !== 0) {\n        col = sizes.indexOf(size);\n      }\n      const qty = itemExists.quantity[row][col];\n      itemExists.quantity[row][col] = 0;\n      itemExists.totalQty -= qty;\n\n      // Find the remainder variations\n      const remainingVariations = variations.filter(\n        (variation) => variation.colour !== colour || variation.size !== size\n      );\n      // Set variations to the remainders\n      itemExists.variations = remainingVariations;\n\n      let remainingProducts = state.addedProducts;\n      // If no more variations, remove the product\n      if (remainingVariations.length === 0) {\n        remainingProducts = remainingProducts.filter(\n          (product) => product._id !== _id\n        );\n      } else {\n        //Else, replace the existing product with the changed product\n        remainingProducts = remainingProducts.map((product) =>\n          product._id !== _id ? product : itemExists\n        );\n      }\n      const newTotal = state.total - price * qty;\n      if (remainingProducts.length > 0) {\n        return {\n          ...state,\n          addedProducts: remainingProducts,\n          total: roundTo(newTotal),\n        };\n      } else {\n        return initState;\n      }\n    }\n    case 'CHANGE_QTY_FROM_CART': {\n      const changeProduct = action.data.product;\n      // console.log(changeProduct);\n      const stock = action.data.stock;\n      const changeType = action.data.type;\n      const itemExists = state.addedProducts.find(\n        (product) => changeProduct._id === product._id\n      );\n      const { variations, quantity } = itemExists;\n      let row = 0;\n      let col = 0;\n      if (changeProduct.colours.length !== 0) {\n        row = changeProduct.colours.indexOf(changeProduct.colour);\n      }\n      if (changeProduct.sizes.length !== 0) {\n        col = changeProduct.sizes.indexOf(changeProduct.size);\n      }\n      let newTotal = roundTo(state.total);\n      //FIXME remove variations if using table\n      // console.log(stock);\n      const newVariations = variations.map((pdt) => {\n        if (\n          pdt.colour === changeProduct.colour &&\n          pdt.size === changeProduct.size\n        ) {\n          if (\n            changeType === 'INCREASE' &&\n            quantity[row][col] < stock[row][col]\n          ) {\n            quantity[row][col] += 1;\n            pdt.quantity += 1;\n            itemExists.totalQty += 1;\n            newTotal = roundTo(state.total + pdt.price);\n          } else if (changeType === 'DECREASE') {\n            quantity[row][col] -= 1;\n            pdt.quantity -= 1;\n            itemExists.totalQty -= 1;\n            newTotal = roundTo(state.total - pdt.price);\n          }\n        }\n        return pdt;\n      });\n      let updateProduct = null;\n      updateProduct = {\n        ...itemExists,\n        quantity,\n        variations: newVariations,\n      };\n      const changedProducts = state.addedProducts.map((product) =>\n        product._id !== changeProduct._id ? product : updateProduct\n      );\n      return {\n        ...state,\n        total: newTotal,\n        addedProducts: changedProducts,\n      };\n    }\n    case 'RESET':\n      return initState;\n    default:\n      return state;\n  }\n};\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}